generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model resume {
  id                  String                @id @default(uuid())
  name                String
  photo_url           String?
  title               String
  summary             String
  version             String                @default("1.0.0") @db.VarChar(255)
  contact_information contact_information[]
  education           education[]
  experience          experience[]
  project             project[]
}

model contact_information {
  id        String      @id @default(uuid())
  title     String
  value     String
  icon_url  String?
  type      ContactType
  resume_id String?
  resume    resume?     @relation(fields: [resume_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model experience {
  id                  String             @id @default(uuid())
  company             String
  title               String
  start               String
  end                 String
  location            String
  company_description String
  summary             String
  private             Boolean
  resume_id           String?
  sort                Int                @default(0)
  resume              resume?            @relation(fields: [resume_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  experience_skill    experience_skill[]
  highlight           highlight[]
}

model highlight {
  id              String            @id @default(uuid())
  title           String
  points          String[]
  experience_id   String?
  experience      experience?       @relation(fields: [experience_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  highlight_skill highlight_skill[]
}

model education {
  id            String  @id @default(uuid())
  school        String
  degree        String
  concentration String
  date          String
  resume_id     String?
  resume        resume? @relation(fields: [resume_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model skill {
  id                String             @id @default(uuid())
  name              String             @unique
  icon_url          String?
  skill_category_id String?            @db.Uuid
  experience_skill  experience_skill[]
  highlight_skill   highlight_skill[]
  project_skill     project_skill[]
  skill_category    skill_category?    @relation(fields: [skill_category_id], references: [id])
}

model skill_category {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String
  sort  Int     @default(0)
  skill skill[]
}

model project {
  title              String
  summary            String
  link               String
  resume_id          String?
  image_url          String?
  banner_url         String?
  slug               String               @unique
  github_link        String               @default("")
  description        String               @default("")
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status             ProjectStatus?       @default(Building)
  notes              String?
  resume             resume?              @relation(fields: [resume_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_skill      project_skill[]
  project_technology project_technology[]
}

model technology {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  type               TechnologyType
  sort               Int                  @default(0)
  dark_icon          String?
  icon               String?
  project_technology project_technology[]
}

model project_technology {
  project_id    String     @db.Uuid
  technology_id String     @db.Uuid
  project       project    @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  technology    technology @relation(fields: [technology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([project_id, technology_id])
}

model project_skill {
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  skill_id   String
  project_id String    @db.Uuid
  project    project   @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skill      skill     @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([project_id, skill_id])
}

model experience_skill {
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  experience_id String
  skill_id      String
  experience    experience @relation(fields: [experience_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skill         skill      @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([experience_id, skill_id])
}

model highlight_skill {
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  highlight_id String
  skill_id     String
  highlight    highlight @relation(fields: [highlight_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skill        skill     @relation(fields: [skill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([highlight_id, skill_id])
}

enum TechnologyType {
  language
  framework
  library
  database
  tool
  hosting
}

enum ProjectStatus {
  Idea
  Live
  Building
  Stale
  Archived
}

enum ContactType {
  phone
  email
  website
  linkedin
  github
  social
}
